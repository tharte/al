# -*- org-confirm-babel-evaluate: nil -*- 
#+title:     A Cunning Plan
#+author:    
#+subtitle:   The Lambda Calculus, Lisp, Scheme, and R
#+date:    
#+language:   en
#+options:    H:2 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+options:    TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc

#+startup: beamer
#+latex_class: beamer
#+beamer_frame_level: 2
#+latex_class_options: [9pt]

#+latex_header:  \mode<beamer>{\usetheme[progressbar=frametitle]{metropolis}}
#+latex_header:  \usepackage{minted}
#+latex_header:  \usemintedstyle{colorful}
#+latex_header:  \usepackage[linesnumbered,ruled]{algorithm2e}
#+options:       tex:imagemagick
#+bind:          org-latex-image-default-width 0.5\linewidth $
#+bind:          org-latex-prefer-user-labels t

#+include:       /home/tharte/dot/include/newcommands.tex src latex
#+latex_header:  \newtheorem{defn}{Definition}[section]
#+latex_header:  \newtheorem{remark}{Remark}[section]
#+latex_header:  \usetikzlibrary{positioning}
#+latex_header:  \usetikzlibrary{shadows}
#+latex_header:  \usetikzlibrary{arrows}
#+latex_header:  \usetikzlibrary{matrix}

#+latex_header:  \usepackage{syntax}
#+latex_header:  \usepackage{textgreek}
#+latex_header:  \usepackage[makeroom]{cancel}

#+latex_header:  \definecolor{lightgreen}{HTML}{90EE90}
#+latex_header:  \definecolor{lightblue}{rgb}{0.94,0.94,0.95}

# make the counter algocf overlay aware (e.g. when using algorithm2e with onslide)
# Source:    https://tex.stackexchange.com/questions/226929/making-algorithm2e-environments-overlay-aware-in-beamer
#+latex_header:  \resetcounteronoverlays{algocf}

#+latex_header: \author{Thomas P.~Harte}
#+latex_header: \institute{R/Finance 2024-05-18 \\ University of Illinois at Chicago}

# Source: https://tex.stackexchange.com/questions/132783/how-to-write-checkmark-in-latex
#+latex_header:  \def\checkmark{\textcolor{green}{\tikz\fill[scale=0.4](0,.35) -- (.25,0) -- (1,.7) -- (.25,.15) -- cycle;}}



# 
# SET-UP
#
#+begin_src R :session :exports none :results silent :eval no
# none
#+end_src

* Disclaimer
** Disclaimer
#+begin_export latex
    Thomas P. Harte (``the Author'') is providing
    this presentation and its contents (``the Content'') for educational
    purposes only at the \emph{R in Finance Conference\/}, 2024-05-18,
    Chicago, IL.  The Author is not a registered investment advisor,
    nor does the Author purport to offer investment advice,
    nor business advice. The opinions expressed in the Content 
    belong solely to the Author, and do not necessarily represent the 
    opinions of the Author's employers, nor any 
    organization, committee or other group with which the Author
    is affiliated.
\newline \newline
    THE AUTHOR SPECIFICALLY DISCLAIMS ANY PERSONAL LIABILITY, LOSS OR RISK
    INCURRED AS A CONSEQUENCE OF THE USE AND APPLICATION, EITHER DIRECTLY
    OR INDIRECTLY, OF THE CONTENT. THE AUTHOR SPECIFICALLY DISCLAIMS ANY
    REPRESENTATION, WHETHER EXPLICIT OR IMPLIED, THAT APPLYING THE CONTENT
    WILL LEAD TO SIMILAR RESULTS IN A BUSINESS SETTING. THE RESULTS PRESENTED
    IN THE CONTENT ARE NOT NECESSARILY TYPICAL AND SHOULD NOT DETERMINE
    EXPECTATIONS OF FINANCIAL OR BUSINESS RESULTS.
#+end_export

* Motivation
** What is this?
#+begin_src R :session *R* :exports both :results output :eval no
Y(\(r) \(n)
    `zerop?`(n)(C0)
    (`IF`(eq(n)(C1))
	(C1)
	(\(x) add (r( sub(n)(C1) )) (r( sub(n)(C2) )) (x)))) 
#+end_src

#+RESULTS:
: 
: 

** It's R!
#+begin_src R :session *R* :exports both :results output :eval no
Y(\(r) \(n)
    `zerop?`(n)(C0)
    (`IF`(eq(n)(C1))
	(C1)
	(\(x) add (r( sub(n)(C1) )) (r( sub(n)(C2) )) (x)))) (C10) |> .to.integer ()
#+end_src

#+RESULTS:
: 
: [1] 55

** Fibonacci: R
#+begin_src R :session *R* :exports both :results output :eval no
Y(\(r) \(n)
    `zerop?`(n)(C0)
    (`IF`(eq(n)(C1))
	(C1)
	(\(x) add (r( sub(n)(C1) )) (r( sub(n)(C2) )) (x)))) -> fibonacci

lapply(list(C0, C1, C2, C3, C4, C5, C6, C7, C8, C9, C10),
       \(n) cat(sprintf("%+2s: %+3s\n", n |> .to.integer(), fibonacci(n) |> .to.integer())))
           -> dev.null
#+end_src

#+latex: \vspace{-0.5cm}
#+RESULTS:
#+begin_example
 0:   0
 1:   1
 2:   1
 3:   2
 4:   3
 5:   5
 6:   8
 7:  13
 8:  21
 9:  34
10:  55
#+end_example

** Fibonacci: Lisp
#+begin_src emacs-lisp :exports both :results output :eval yes
(defun fibonacci (n)
    (if (or (= n 0) (= n 1)) n
	(+ (fibonacci (- n 1)) (fibonacci (- n 2)))))

(let ((x '(0 1 2 3 4 5 6 7 8 9 10)))
(mapcar (lambda (x) (princ (format "%2s:%+3s\n" x (fibonacci x)))) x))
#+end_src

#+RESULTS:
#+begin_example
 0:  0
 1:  1
 2:  1
 3:  2
 4:  3
 5:  5
 6:  8
 7: 13
 8: 21
 9: 34
10: 55
#+end_example

* Lambda Calculus: Theory
** Functions
- Mathematics
  
  $$x \mapsto x^2$$

- \onslide<2-> Haskell

    #+begin_src haskell :exports both :results output :eval no
    (\x -> x^2) 3
    #+end_src

    #+RESULTS:
    : 9

- \onslide<3-> R

    #+begin_src R :session *R* :exports both :results output :eval no
    (\(x) x^2) (3)
    #+end_src

    #+RESULTS:
    : [1] 9

** Functions
- Mathematics
  
  $$x \mapsto x^2$$

- Haskell

    #+begin_src haskell :exports both :results output :eval no
    (\x -> x^2) 3
    #+end_src

    #+RESULTS:
    : 9

- R

    #+begin_src R :session *R* :exports both :results output :eval no
    (function(x) x^2) (3)
    #+end_src

    #+RESULTS:
    : [1] 9

** Haskell: ~Int~
- Mathematics: constrain $x$
  
  $$f: x \mapsto x^2,\quad\forall x\in\ZZ$$

- \onslide<2-> type is metadata

    #+begin_src haskell :exports both :results output :eval no
    :{
      f :: Int -> Int
      f = \x -> x^2
    :}
    f 3
    #+end_src

    #+RESULTS:
    : 9

** Haskell: ~Double~
- Mathematics: constrain $x$
  
  $$f : x \mapsto x^2,\quad\forall x\in\RR$$

- \onslide<2-> type is metadata

    #+begin_src haskell :exports both :results output :eval no
    :{
      f :: Double -> Double
      f = \x -> x^2
    :}
    f 3.0
    #+end_src

    #+RESULTS:
    : 9.0

** Haskell: ~Num~
- Mathematics: what if there is no constraint on $x$?
  
  $$x \mapsto x^2,\quad\forall x\in\;???$$

- \onslide<2-> Haskell infers type

    #+begin_src haskell :exports both :results output :eval no
    :type \x -> x^2
    #+end_src

    \pause
    
    #+RESULTS:
    : \x -> x^2 :: Num a => a -> a

- \onslide<3-> type is metadata

    #+begin_src haskell :exports both :results output :eval no
    :{
      f :: Num a => a -> a
      f x = x^2
    :}
    f 3
    #+end_src

    #+RESULTS:
    : 9

** Haskell: What is ~Num~?
- \onslide<2-> ~Num~ is a /type class/

    #+begin_src haskell :exports both :results output :eval no
    :info Num
    #+end_src

    #+LATEX: {\tiny
    #+RESULTS:
    #+begin_example
    class Num a where
      (+) :: a -> a -> a
      (-) :: a -> a -> a
      (*) :: a -> a -> a
      negate :: a -> a
      abs :: a -> a
      signum :: a -> a
      fromInteger :: Integer -> a
      {-# MINIMAL (+), (*), abs, signum, fromInteger, (negate | (-)) #-}
	    -- Defined in ‘GHC.Num’
    instance Num Word -- Defined in ‘GHC.Num’
    instance Num Integer -- Defined in ‘GHC.Num’
    instance Num Int -- Defined in ‘GHC.Num’
    instance Num Float -- Defined in ‘GHC.Float’
    instance Num Double -- Defined in ‘GHC.Float’
    #+end_example
    #+LATEX: }

** Haskell: What is ~Int~?
- ~Int~ is a /data constructor/: it is an /instance/ of type class ~Num~

    #+begin_src haskell :exports both :results output :eval no
    :info Int
    #+end_src

    #+LATEX: {\tiny
    #+RESULTS:
    #+begin_example
    data Int = GHC.Types.I# GHC.Prim.Int# 	-- Defined in ‘GHC.Types’
    instance Eq Int -- Defined in ‘GHC.Classes’
    instance Ord Int -- Defined in ‘GHC.Classes’
    instance Enum Int -- Defined in ‘GHC.Enum’
    instance Num Int -- Defined in ‘GHC.Num’
    instance Real Int -- Defined in ‘GHC.Real’
    instance Show Int -- Defined in ‘GHC.Show’
    instance Integral Int -- Defined in ‘GHC.Real’
    instance Bounded Int -- Defined in ‘GHC.Enum’
    instance Read Int -- Defined in ‘GHC.Read’
    #+end_example
    #+LATEX: }

** Haskell: What is ~Double~?
- ~Double~ is a /data constructor/: it is an /instance/ of type class ~Num~

    #+begin_src haskell :exports both :results output :eval no
    :info Double
    #+end_src

    #+LATEX: {\tiny
    #+RESULTS:
    #+begin_example
    data Double = GHC.Types.D# GHC.Prim.Double#
	    -- Defined in ‘GHC.Types’
    instance Eq Double -- Defined in ‘GHC.Classes’
    instance Ord Double -- Defined in ‘GHC.Classes’
    instance Enum Double -- Defined in ‘GHC.Float’
    instance Floating Double -- Defined in ‘GHC.Float’
    instance Fractional Double -- Defined in ‘GHC.Float’
    instance Num Double -- Defined in ‘GHC.Float’
    instance Real Double -- Defined in ‘GHC.Float’
    instance RealFloat Double -- Defined in ‘GHC.Float’
    instance RealFrac Double -- Defined in ‘GHC.Float’
    instance Show Double -- Defined in ‘GHC.Float’
    instance Read Double -- Defined in ‘GHC.Read’
    #+end_example
    #+LATEX: }

** Back to functions...
- Mathematics
  
  $$f : x \mapsto x^2$$

- R

    #+begin_src R :session *R* :exports both :results output :eval no
    f<- \(x) x^2
    f(3)
    #+end_src

    #+RESULTS:
    : 
    : [1] 9

** What if we /only/ had anonymous functions? (no /function names/)
- Mathematics
  
  $$x \mapsto x^2$$

- R

    #+begin_src R :session *R* :exports both :results output :eval no
    (\(x) x^2) (3)
    #+end_src

    #+RESULTS:
    : [1] 9

** What if we /only/ had anonymous functions? (nor /numerals/...)
- Mathematics
  
  $$x \mapsto x$$

- R

    #+begin_src R :session *R* :exports both :results output :eval no
    \(x) x
    #+end_src

    #+RESULTS:
    : \(x) x

** Lambda terms
- \onslide<2-> Lambda Calculus has three basic components, or /lambda terms/

  1. \onslide<3-> $\lambda$ expressions
  2. \onslide<4-> variables
  3. \onslide<5-> abstractions
     
- \onslide<6-> $\lambda$ expressions form a superset $\Lambda$

  \onslide<7->
  $$\mbox{$\lambda$ expressions} \supset \{ \mbox{variables}, \mbox{abstractions} \}$$

- \onslide<8-> variables

  + \onslide<9-> no meaning or value
  + \onslide<10-> just a /name/ for an input to a function
  + \onslide<11-> /e.g./ $x$, $y$, $z$

- \onslide<12-> abstractions

  + \onslide<13-> an abstraction is a /function/ (usually called a ``lambda'')
  + \onslide<14-> two parts (separated by a dot):
    $$\underbrace{\lambda x}_{\mbox{\scriptsize head}}. \underbrace{x}_{\mbox{\scriptsize body}}$$
  + \onslide<15-> the body is a $\lambda$ expression
    \onslide<16->
    $$\underbrace{\lambda x}_{\mbox{\scriptsize head}}. \underbrace{\mbox{$\lambda$ expression}}_{\mbox{\scriptsize body}}$$

** Application
- \onslide<2-> the action part of Lambda Calculus: evaluate (/i.e./ reduce) lambda terms

  + \onslide<3-> bind the parameter to the concrete argument

    \onslide<4->
    $$(\lambda\underbrace{x}_{\mbox{\scriptsize parameter}}. \underbrace{x}_{\mbox{\scriptsize body}})\,\underbrace{1}_{\mbox{\scriptsize argument}}$$

  + \onslide<5-> the argument is the specific lambda term that the abstraction (/i.e./ the lambda) is applied to

  + \onslide<6-> a /computation/ is the repeated application of lambdas to arguments until there are no applications left to perform

- \onslide<7-> simplest example of computation: the identity

    \onslide<8->
    $$(\lambda x. x)\,1$$

    \onslide<9->
    $$(\lambda\underbrace{x}_{\mbox{\scriptsize parameter}}. \underbrace{x}_{\mbox{\scriptsize body}})\,\underbrace{1}_{\mbox{\scriptsize argument}}$$

    \onslide<10->
    $$\lambda\underbrace{[x:= 1]}_{\mbox{\scriptsize parameter}}. \underbrace{x}_{\mbox{\scriptsize body}}$$

    \onslide<11->
    $$\underbrace{1}_{\mbox{\scriptsize reduced}}$$
     
** $\alpha$ equivalence, $\beta$ reduction
- \onslide<2-> alpha equivalence

  + \onslide<3-> $\lambda x.x$
  + \onslide<4-> $\lambda y.y$ - same thing
  + \onslide<5-> $\lambda x.xy$
  + \onslide<6-> $\lambda x.xz$ - same thing

- \onslide<7-> beta reduction

    + \onslide<8->
      application: substitute the input $\lambda$ expression for all instances of bound variables
      within the body of the abstraction

    + \onslide<9->
      eliminate the head of the abstraction (its only purpose is to bind a variable)

- \onslide<10-> example

    \onslide<11->
    $$(\lambda z.z)(\lambda y.y) \mapsto \underbrace{(\lambda x.x)}_{\scriptsize\mbox{$\alpha$ equivalence}}(\lambda y.y)$$ 

    \onslide<12->
    $$\lambda [x:= \lambda y.y].x$$

    \onslide<13->
    $$\underbrace{\lambda y.y}_{\scriptsize\mbox{reduced}}$$

** Free variables
- \onslide<2-> here, $z$ is a /free variable/

  + $\bigl( (\lambda x.x)(\lambda y.y) \bigr)\,z$

  + \onslide<3-> $\beta$ reduce the $\lambda$ expression

    \onslide<4-> 
    $$\bigl( (\lambda x.x)(\lambda y.y) \bigr)\,z$$

    \onslide<5-> 
    $$\bigl( \lambda [x:= \lambda y.y].x \bigr)\,z$$

    \onslide<6-> 
    $$(\lambda y.y)\,z$$

    \onslide<7-> 
    $$\lambda [y:= z].y$$

    \onslide<8-> 
    $$z$$

- \onslide<9-> here, $y$ is a /free variable/

  + $\lambda x.xy$

** Combinators
- \onslide<2-> combinators serve to combine the arguments they are given,
  without introducing new values (/i.e./ free variables)

- \onslide<3-> combinators are $\lambda$ expressions in which there are /no/ free variables

- \onslide<4-> examples

    + \onslide<5-> combinator (every $\lambda$ expression in the body occurs in the head):
      $$\lambda x. x$$

    + \onslide<6-> combinator (every $\lambda$ expression in the body occurs in the head):
      $$\underbrace{\lambda xy}_{\scriptsize\mbox{note}}\!\!.x \mapsto \lambda x.(\lambda y. x) \mapsto \underbrace{\lambda x.\lambda y.}_{\scriptsize\mbox{``currying''}} \!\!\!x = \lambda x.\lambda y. x$$

    + \onslide<7-> /not/ a combinator ($y$ is a free variable: it does not occur in the head):
      $$\lambda x. y$$

** Combinators in use
- \onslide<2-> select /left/

      \onslide<3->
      $$(\lambda xy. x)(ab)$$
      
      \onslide<4->
      $$(\lambda x. \lambda y. x)(ab)$$

      \onslide<5->
      $$\bigl((\lambda x. \lambda y. x)(a)\bigr)(b)$$

      \onslide<6->
      $$(\lambda [x:= a]. \lambda y. x)(b)$$

      \onslide<7->
      $$(\lambda y. a)(b)$$

      \onslide<8->
      $$\lambda [y:= b]. a$$

      \onslide<9->
      $$a$$

** Combinators in use
- \onslide<2-> select /right/

      \onslide<3->
      $$(\lambda xy. y)(ab)$$
      
      \onslide<4->
      $$(\lambda x. \lambda y. y)(ab)$$

      \onslide<5->
      $$\bigl((\lambda x. \lambda y. y)(a)\bigr)(b)$$

      \onslide<6->
      $$(\lambda [x:= a]. \lambda y. y)(b)$$

      \onslide<7->
      $$(\lambda y. y)(b)$$

      \onslide<8->
      $$\lambda [y:= b]. y$$

      \onslide<9->
      $$b$$

** Divergence: non-terminating $\lambda$ expressions
- \onslide<2-> consider

      $$(\lambda x. xx)(\lambda x. xx)$$
      
      \onslide<3->
      $$\lambda [x:= (\lambda x. xx)]. xx$$

      \onslide<4->
      $$(\lambda x. xx)(\lambda x. xx)$$
      
- \onslide<5-> 

  some $\lambda$ expressions clearly disallow reduction to normal form:
  such $\lambda$ expressions /diverge/ 

- \onslide<6-> the $\lambda$ expression $(\lambda x. xx)(\lambda x. xx)$ is called ``omega''

** Backus-Naur Form
# Source: https://tex.stackexchange.com/questions/24886/which-package-can-be-used-to-write-bnf-grammars/24934#24934

The BNF form summarizes the grammar for the Lambda Calculus:

#+latex: {\mbox{}\tiny\newline}

    #+latex: \setlength{\grammarparsep}{20pt plus 1pt minus 1pt} % increase separation between rules
    #+latex: \setlength{\grammarindent}{12em} % increase separation between LHS/RHS 

    \begin{grammar}

	<$\lambda$ expression> ::= <variable> 
			       \alt <constant> 
			       \alt <application> 
			       \alt <abstraction> 

	<application> ::= (<$\lambda$ expression>) <$\lambda$ expression>

	<abstraction> ::= $\lambda$ <variable>. <$\lambda$ expression>

    \end{grammar}

#+latex: {\mbox{}\tiny\newline}
#+latex: {\tiny Source: \cite{Revesz:88}}
  
* Lambda Calculus: Implementation
** Booleans & branching
- \onslide<2-> Truth and Falsity

    \onslide<3-> 
    $${\tt true} = T \bydefn \lambda x\lambda y.x$$

    \onslide<4-> 
    $${\tt false} = F \bydefn \lambda x\lambda y.y$$

- \onslide<5-> if-then-else (the Branching Combinator)

    \onslide<6-> 
    $${\tt IF} \bydefn p (ab)$$

    \onslide<7-> 
    $$p (ab) = T (ab) = (\lambda x\lambda y.x) (ab) \mapsto a$$

    \onslide<8-> 
    $$p (ab) = F (ab) = (\lambda x\lambda y.y) (ab) \mapsto b$$

* References 
 
#+BIBLIOGRAPHY: /home/tharte/dot/include/refs cell limit:t

